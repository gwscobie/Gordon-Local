{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Standard EC2 environment using an auto-scaling group with an Elastic Load Balancer to distribute traffic.",
    "Parameters": {
        "InstanceName": {
          "Type": "String",
          "Description": "A descriptive name to give the instances, e.g. WEB. This will be prefixed by the Country and suffixed by the Environment automatically."
        },
        "AMI": {
            "Description": "AMI ID",
            "Type": "AWS::EC2::Image::Id",
            "Default": "ami-4f0ex"
        },
        "MinSize": {
          "Type": "Number",
          "Default": "1",
          "Description": "The min number of Instances"
        },
        "MaxSize": {
          "Type": "Number",
          "Default": "1",
          "Description": "The max number of Instances"
        },
        "InstanceType": {
            "Description": "Type of EC2 instance to launch.",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSLCertificate": {
          "Description": "SSL certificate to put on the ELB.",
          "Type": "String",
          "AllowedValues": [
              "wildcard-xxx-xx",
              "wildcard-xxx-xx",
              "wildcard-xxx-xx",
              "wildcard-xxx-xx",
              "wildcard-xxx-xx",
              "wildcard-xxx-xx",
              "wildcard-xxx-xx"
          ]
        },
        "OctopusRoles": {
          "Description": "Roles to tag instances with in OD to enable deployment of projects.",
          "Type": "String",
          "Default": "NXLog"
        },
        "LoadBalancerPort": {
          "Description": "Port for the ELB to listen on.",
          "Type": "Number",
          "Default": 443,
          "MinValue": 1,
          "MaxValue": 65336
        },
        "InstancePort": {
          "Description": "Port for the Instance to listen on.",
          "Type": "Number",
          "Default": 80,
          "MinValue": 1,
          "MaxValue": 65336
        },
        "ConnectionDrainingTimeout": {
          "Description": "Connection draining timeout before remove an instance from the ELB.",
          "Type": "Number",
          "Default": 15,
          "MinValue": 1,
          "MaxValue": 600
        },
        "ScalingUpThreshold": {
            "Description": "The CPU threshold above which to increase the number of instances in the ASG.",
            "Type": "Number",
            "Default": 60,
            "MinValue": 1,
            "MaxValue": 100
        },
        "ScalingDownThreshold": {
            "Description": "The CPU threshold below which to decrease the number of instances in the ASG.",
            "Type": "Number",
            "Default": 20,
            "MinValue": 1,
            "MaxValue": 100
        },
        "SecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "The security groups to be added to the ELB."
        },
        "Division": {
          "Description": "The division that will be consuming/is provisioning this service.",
          "Type": "String",
          "AllowedValues": [
            "Core",
            "Arcade",
            "Bingo",
            "International"
          ]
        },
        "Team": {
          "Description": "The team that will be primarily consuming/is provisioning this service.",
          "Type": "String",
          "AllowedValues": [
            "Client",
            "Engine",
            "Platform",
            "ISA",
            "Infra",
            "Data Engineering"
          ]
        },
        "Role": {
          "Description": "The role this service will be helping to complete.",
          "Type": "String",
          "AllowedValues": [
            "Build",
            "Chat",
            "Data",
            "DB",
            "Game",
            "Infrastructure",
            "Reporting",
            "Testing",
            "VPN",
            "Web",
            "Misc"
          ]
        },
        "Country": {
            "Description": "The country that will be primarily consuming/is provisioning this service or EU for all.",
            "Type": "String",
            "AllowedValues": [
              "DK",
              "ES",
              "SE",
              "EU",
              "IT",
              "NL",
              "PT",
              "UK"
            ]
        },
        "ChangeNo": {
          "Description": "A change number or JIRA ticket that records the authorisation for the stack to be built or the feature request this stack is part of.",
          "Type": "String"
        }
    },
    "Metadata": {
        "ProductName": "Standard EC2 Environment",
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups": [{
                "Label": { "default": "Instance Settings" },
                "Parameters": [ "InstanceName", "InstanceType", "OctopusRoles" ]
              }, {
                  "Label": { "default": "Load Balancer Settings" },
                  "Parameters": [ "SSLCertificate", "LoadBalancerPort", "InstancePort", "SecurityGroups", "ConnectionDrainingTimeout" ]
              }, {
                  "Label": { "default": "Scaling Settings" },
                  "Parameters": [ "MinSize", "MaxSize", "ScalingUpThreshold", "ScalingDownThreshold" ]
              }, {
                  "Label": { "default": "Misc Details" },
                  "Parameters": [ "Division", "Team", "Role", "Country", "ChangeNo" ]
              }],
              "ParameterLabels": {
                  "OctopusRoles": { "default": "Octopus Roles" },
                  "SSLCertificate": { "default": "Load Balancer SSL Certificate" },
                  "LoadBalancerPort": { "default": "Load Balancer Port" },
                  "InstancePort": { "default": "Instance Port" },
                  "ConnectionDrainingTimeout": { "default": "Connection Draining Timeout" },
                  "MinSize": { "default": "Min Number of Instances" },
                  "MaxSize": { "default": "Max Number of Instances" },
                  "InstanceName": { "default": "Instance Name" },
                  "ScalingUpThreshold": { "default": "Scaling Up Threshold" },
                  "ScalingDownThreshold": { "default": "Scaling Down Threshold" },
                  "InstanceType": { "default": "Instance Type" },
                  "ChangeNo": { "default": "Change Number" },
                  "SecurityGroups": { "default": "Security Groups" }
              }
        }
    },
    "Mappings": {
      "SSLCertificateToCode": {
        "wildcard-tombola-uk": { "INFRA": "arn:aws:acm:eu-west-1:xxxxxxxxxxxxx:certificate/f12bfaf4-2354-46ed-87a9-fb07c117b769", "OPSPLAY": "arn:aws:acm:eu-west-1:xxxxxxxxxxxxx:certificate/280125e6-09a6-470c-a587-cfdcc8317cc5", "PLAY": "arn:aws:acm:eu-west-1:xxxxxxxxxxxx:certificate/6bab9d4a-a7b6-4dab-b3b3-303c7a3390de", "DEV": "arn:aws:acm:eu-west-1:xxxxxxxxxxxxx:certificate/1a347d01-e41f-41ca-963d-a1b8279fe0de", "STAGE": "arn:aws:acm:eu-west-1:xxxxxxxxxxx:certificate/ea14c595-1bdd-4037-98c4-0d5dd65d3313", "LIVE": "arn:aws:acm:eu-west-1:xxxxxxxxxx:certificate/378f64a7-c347-4e80-b068-7c99b1dfb4f9" },
        
      },
      "AccountVariables":
      {
        "160xx":
        {
          "Environment": "INFRA",
          "EnvironmentCode": "PR",
          "OctopusEnvironment": "DeployToEMEA",
          "VpcId": "vpc-xxxxxxx",
          "PrivateSubnetA": "subnet-xxxx",
          "PrivateSubnetB": "subnet-xxxx",
          "PublicSubnetA": "subnet-xxxx",
          "PublicSubnetB": "subnet-xxxx",
          "AdminSecurityGroup": "sg-xxxxx"
        },
        "075xx":
        {
          "Environment": "DEV",
          "EnvironmentCode": "DV",
          "OctopusEnvironment": "DeployToDev",
          "VpcId": "vpc-70x",
          "PrivateSubnetA": "subnet-701x",
          "PrivateSubnetB": "subnet-4ebx",
          "PublicSubnetA": "subnet-7118x",
          "PublicSubnetB": "subnet-41bfx",
          "AdminSecurityGroup": "sg-29dx"
        },
        "094xx":
        {
          "Environment": "STAGE",
          "EnvironmentCode": "ST",
          "OctopusEnvironment": "DeployToStaging",
          "VpcId": "vpc-3bax",
          "PrivateSubnetA": "subnet-9f2x",
          "PrivateSubnetB": "subnet-edx",
          "PublicSubnetA": "subnet-902x",
          "PublicSubnetB": "subnet-e98x",
          "AdminSecurityGroup": "sg-ee7x"
        },
        "18xxxxxxxx":
        {
          "Environment": "LIVE",
          "EnvironmentCode": "PR",
          "OctopusEnvironment": "DeployToLive",
          "VpcId": "vpc-2aexf",
          "PrivateSubnetA": "subnet-2a3a1x",
          "PrivateSubnetB": "subnet-379x",
          "PublicSubnetA": "subnet-066ax3",
          "PublicSubnetB": "subnet-1ex",
          "AdminSecurityGroup": "sg-1c3x"
        },
        "630xxxxxxxxx":
        {
          "Environment": "PLAY",
          "EnvironmentCode": "PLY",
          "OctopusEnvironment": "DeployToPreDev",
          "VpcId": "vpc-x",
          "PrivateSubnetA": "subnet-83cfx",
          "PrivateSubnetB": "subnet-f36x",
          "PublicSubnetA": "subnet-64cx",
          "PublicSubnetB": "subnet-4b7x",
          "AdminSecurityGroup": "sg-654x"
        },
        "xxxxxxxxxxxxx":
        {
          "Environment": "OPSPLAY",
          "EnvironmentCode": "OPG",
          "OctopusEnvironment": "OpsPlayground",
          "VpcId": "vpc-b35x",
          "PrivateSubnetA": "subnet-e1x",
          "PrivateSubnetB": "subnet-4ebx",
          "PublicSubnetA": "subnet-74d4x",
          "PublicSubnetB": "subnet-6cbx",
          "AdminSecurityGroup": "sg-9cx"
        }
      }
    },
    "Resources": {
        "BASELAUNCHCONFIG": {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "KeyName": "EC2Connect",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                                "# Version: 1.0\n",
                                "<powershell>", "\n",
                                "if((Test-Path \"C:\\Assets\") -ne $true) {", "\n",
                                "   New-Item -Path \"C:\\Assets\" -ItemType \"directory\"", "\n",
                                "}", "\n",
                                "Copy-S3Object -SourceBucket xxxx-filerepo-pr -SourceKey xxx/AWS/BuildMeScripts/JoinDC/KickStart.ps1 C:\\Assets\\KickStart.ps1", "\n",
                                "& C:\\Assets\\KickStart.ps1"," -Environment ", { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "EnvironmentCode" ] }, " >> C:\\Assets\\KickStart.log", "\n",
                                "</powershell>", "\n"
                            ]
                        ]
                    }
                },
                "IamInstanceProfile": "Software",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "ImageId": {
                  "Ref": "AMI"
                },
                "SecurityGroups": [ { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "AdminSecurityGroup" ] } ]
            }
        },
        "BASEELB" : {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets": [ { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "PublicSubnetA" ] }, { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "PublicSubnetB" ] } ],
                "SecurityGroups": { "Ref": "SecurityGroups" },
                "Listeners": [
                    {
                      "LoadBalancerPort": { "Ref": "LoadBalancerPort" },
                      "InstancePort": { "Ref": "InstancePort" },
                      "Protocol": "HTTPS",
                      "InstanceProtocol": "HTTP",
                      "PolicyNames" : [ "StickinessPolicy" ],
                      "SSLCertificateId": { "Fn::FindInMap": [ "SSLCertificateToCode", { "Ref": "SSLCertificate" }, { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "Environment" ] } ] }
                    }
                ],
                "Policies" : [
                  {
                      "PolicyName" : "StickinessPolicy",
                      "PolicyType" : "AppCookieStickinessPolicyType",
                      "Attributes" : [ { "Name" : "CookieName", "Value" : "TombolaCookie" } ]
                  }
                ],
                "LoadBalancerName": { "Fn::Join": ["", [ { "Ref": "Country" }, { "Ref": "InstanceName" }, "C", { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "EnvironmentCode" ] }, "-ELB" ] ] },
                "ConnectionDrainingPolicy": {
                  "Enabled" : "true",
                  "Timeout" : { "Ref": "ConnectionDrainingTimeout" }
                },
		            "Tags": [
                  { "Key": "Country", "Value" : { "Ref": "Country" } },
                  { "Key": "Environment", "Value" : { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "Environment" ] } },
                  { "Key": "Division", "Value": { "Ref": "Division" } },
                  { "Key": "Team-Role", "Value": { "Fn::Join": [ "-", [ { "Ref": "Team" }, { "Ref": "Role" } ] ] } },
                  { "Key": "Source", "Value": "Service Catalog" }
                ]
            }
        },
        "BASEASG": {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "LaunchConfigurationName" : { "Ref" : "BASELAUNCHCONFIG" },
                "MinSize" : { "Ref": "MinSize" },
                "MaxSize" : { "Ref": "MaxSize" },
                "LoadBalancerNames" : [ { "Ref" : "BASEELB" } ],
                "VPCZoneIdentifier": [ { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "PrivateSubnetA" ] }, { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "PrivateSubnetB" ] } ],
                "Tags": [
                    { "Key": "Name", "Value" : { "Fn::Join": ["", [ { "Ref": "Country" }, { "Ref": "InstanceName" }, "C", { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "EnvironmentCode" ] } ] ] }, "PropagateAtLaunch": "true" },
                    { "Key": "Country", "Value" : { "Ref": "Country" }, "PropagateAtLaunch": "true" },
                    { "Key": "Environment", "Value" : { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "Environment" ] }, "PropagateAtLaunch": "true" },
                    { "Key": "Division", "Value": { "Ref": "Division" }, "PropagateAtLaunch": "true" },
                    { "Key": "Team-Role", "Value": { "Fn::Join": [ "-", [ { "Ref": "Team" }, { "Ref": "Role" } ] ] }, "PropagateAtLaunch": "true" },
                    { "Key": "Octopus.Role", "Value" : { "Ref": "OctopusRoles" }, "PropagateAtLaunch": "true" },
                    { "Key": "Octopus.Environment", "Value" : { "Fn::FindInMap": [ "AccountVariables", { "Ref": "AWS::AccountId" }, "OctopusEnvironment" ] }, "PropagateAtLaunch": "true" },
                    { "Key": "Source", "Value": "Service Catalog", "PropagateAtLaunch": "true" }
                ]
            }
        },
        "ScalingUpPolicy": {
           "Type" : "AWS::AutoScaling::ScalingPolicy",
           "Properties" : {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": { "Ref": "BASEASG" },
              "Cooldown": 600,
              "ScalingAdjustment" : 1
           }
        },
        "ScalingDownPolicy": {
           "Type" : "AWS::AutoScaling::ScalingPolicy",
           "Properties" : {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": { "Ref": "BASEASG" },
              "Cooldown": 600,
              "ScalingAdjustment" : -1
           }
        },
        "CPUAlarmHigh": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-up if CPU > 80% for 5 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "1",
            "Threshold": { "Ref": "ScalingUpThreshold" },
            "AlarmActions": [ { "Ref": "ScalingUpPolicy" } ],
            "Dimensions": [
              {
                "Name": "AutoScalingGroupName",
                "Value": { "Ref": "BASEASG" }
              }
            ],
            "ComparisonOperator": "GreaterThanThreshold"
          }
        },
        "CPUAlarmLow": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-down if CPU < 30% for 5 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "1",
            "Threshold": { "Ref": "ScalingDownThreshold" },
            "AlarmActions": [ { "Ref": "ScalingDownPolicy" } ],
            "Dimensions": [
              {
                "Name": "AutoScalingGroupName",
                "Value": { "Ref": "BASEASG" }
              }
            ],
            "ComparisonOperator": "LessThanThreshold"
          }
        }
    },
    "Outputs": {
      "ELBDNSName": {
          "Description": "The DNS name for the ELB.",
          "Value": { "Fn::GetAtt": [ "BASEELB", "DNSName" ] },
          "Export": {
             "Name": { "Fn::Join": [ ":", [ { "Ref": "AWS::StackName" }, "ELBDNSName" ] ] }
          }
      }
    }
}
